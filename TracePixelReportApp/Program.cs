using Microsoft.Extensions.DependencyInjection;
using TracePixelReportApp.ClassLibrary;
using TracePixelReportApp.GUIIOHandlers;
using TracePixelReportApp.Services;

/// <summary>
/// This console application reads a .txt log generated by a tracking pixel
/// and generates a simple report on the findings.
/// </summary>
///
ServiceProvider container = new ServiceCollection().AddScoped<IUserInformerHandler, UserInformerHandler>().BuildServiceProvider();

var dateInputHandler = new DateInputHandler();
var dateService = new DatesService();
var sortLogService = new SortLogService();
(DateTime userInputStartDate, DateTime userInputEndDate, bool datesAreValid) userInputDates = (DateTime.MinValue, DateTime.MinValue, false);

string inputPath = LogPathInputHandler.GetPathToLogFile();
List<string> stringLog = LogReaderService.ReadTextLog(inputPath);
List<LogRow> listLog = LogMapperService.MapTextLogToList(stringLog);

DateTime logFirstDate = listLog.OrderBy(a => a.TimeStamp).First().TimeStamp;
DateTime logLastDate = listLog.OrderBy(a => a.TimeStamp).Last().TimeStamp;

bool userInputDatesValidated = false;
while (!userInputDatesValidated)
{
    string userInputDateString = dateInputHandler.RecieveDateInput(logFirstDate, logLastDate);
    userInputDates = dateService.VerifyDates(userInputDateString);
    userInputDatesValidated = userInputDates.datesAreValid;
}

listLog = sortLogService.SortLogOnInputDates(listLog, userInputDates, logFirstDate, logLastDate);

List<ReportResult> report = ReportService.GenerateReport(listLog);
PrintReportHandler.PrintReport(report);
    
